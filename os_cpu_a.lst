


ARM Macro Assembler    Page 1 


    1 00000000         ;/*********************** (C) COPYRIGHT 2010 Libraworks 
                       *************************
    2 00000000         ;* File Name : os_cpu_a.asm 
    3 00000000         ;* Author  : Librae 
    4 00000000         ;* Version  : V1.0
    5 00000000         ;* Date   : 06/10/2010
    6 00000000         ;* Description : ¦ÌCOS-II asm port for STM32
    7 00000000         ;*******************************************************
                       ************************/
    8 00000000         
    9 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   10 00000000                 IMPORT           CurrentRunThreadNext
   11 00000000                 IMPORT           CurrentRunThread
   12 00000000                 IMPORT           ThreadSwtTarget
   13 00000000                 IMPORT           OSThreadSwtHook
   14 00000000         
   15 00000000                 EXPORT           OSStartHighRdy
   16 00000000                 EXPORT           OSCtxSw
   17 00000000                 EXPORT           OSIntCtxSw
   18 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   19 00000000                 EXPORT           OS_CPU_SR_Restore
   20 00000000                 EXPORT           PendSV_Handler
   21 00000000         
   22 00000000         
   23 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   24 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷(
                                                            2)
   25 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; PendSVÖÐ¶ÏºÍÏµÍ³½
                                                            ÚÅÄÖÐ¶Ï
   26 00000000         ; (¶¼Îª×îµÍ£¬0xff).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ.
                                                            
   28 00000000         
   29 00000000         
   30 00000000                 PRESERVE8
   31 00000000         
   32 00000000                 AREA             |.text|, CODE, READONLY
   33 00000000                 THUMB
   34 00000000         
   35 00000000         
   36 00000000         
   37 00000000         ;*******************************************************
                       *************************************************
   38 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   39 00000000         ;
   40 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   41 00000000         ;              would store the state of the interrupt di



ARM Macro Assembler    Page 2 


                       sable flag in the local variable 'cpu_sr' and then
   42 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   43 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   44 00000000         ;              into the CPU's status register.
   45 00000000         ;
   46 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   47 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   48 00000000         ;
   49 00000000         ;
   50 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   51 00000000         ;
   52 00000000         ;                 void Task (void *p_arg)
   53 00000000         ;                 {
   54 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   55 00000000         ;                     OS_CPU_SR  cpu_sr;
   56 00000000         ;                 #endif
   57 00000000         ;
   58 00000000         ;                          :
   59 00000000         ;                          :
   60 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   61 00000000         ;                          :
   62 00000000         ;                          :
   63 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   64 00000000         ;                          :
   65 00000000         ;                          :
   66 00000000         ;                 }
   67 00000000         ;*******************************************************
                       *************************************************
   68 00000000         
   69 00000000         OS_CPU_SR_Save
   70 00000000 F3EF 8010       MRS              R0, PRIMASK ;¶ÁÈ¡PRIMASKµ½R0,R0
                                                            Îª·µ»ØÖµ 
   71 00000004 B672            CPSID            I           ;PRIMASK=1,¹ØÖÐ¶Ï(N
                                                            MIºÍÓ²¼þFAULT¿ÉÒÔÏì
                                                            Ó¦)
   72 00000006 4770            BX               LR          ;·µ»Ø
   73 00000008         
   74 00000008         OS_CPU_SR_Restore
   75 00000008 F380 8810       MSR              PRIMASK, R0 ;¶ÁÈ¡R0µ½PRIMASKÖÐ,
                                                            R0Îª²ÎÊý
   76 0000000C 4770            BX               LR          ;·µ»Ø
   77 0000000E         
   78 0000000E         
   79 0000000E         ;/******************************************************
                       ********************************
   80 0000000E         ;* º¯ÊýÃû³Æ: OSStartHighRdy
   81 0000000E         ;*
   82 0000000E         ;* ¹¦ÄÜÃèÊö: Ê¹ÓÃµ÷¶ÈÆ÷ÔËÐÐµÚÒ»¸öÈÎÎñ
   83 0000000E         ;* 
   84 0000000E         ;* ²Î    Êý: None
   85 0000000E         ;*
   86 0000000E         ;* ·µ »Ø Öµ: None



ARM Macro Assembler    Page 3 


   87 0000000E         ;*******************************************************
                       *******************************/  
   88 0000000E         
   89 0000000E         OSStartHighRdy
   90 0000000E 4C1E            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity
   91 00000010 4D1E            LDR              R5, =NVIC_PENDSV_PRI
   92 00000012 6025            STR              R5, [R4]
   93 00000014         
   94 00000014 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
   95 00000018 F384 8809       MSR              PSP, R4
   96 0000001C         
   97 0000001C 4C1C            LDR              R4, =OSRunning 
                                                            ; OSRunning = TRUE
   98 0000001E F04F 0501       MOV              R5, #1
   99 00000022 7025            STRB             R5, [R4]
  100 00000024         
  101 00000024         ;ÇÐ»»µ½×î¸ßÓÅÏÈ¼¶µÄÈÎÎñ
  102 00000024 4C1B            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
  103 00000026 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  104 0000002A 6025            STR              R5, [R4]
  105 0000002C         
  106 0000002C B662            CPSIE            I           ;enable interrupts 
                                                            at processor level
  107 0000002E         OSStartHang
  108 0000002E E7FE            B                OSStartHang ;should never get h
                                                            ere
  109 00000030         
  110 00000030         ;/******************************************************
                       ********************************
  111 00000030         ;* º¯ÊýÃû³Æ: OSCtxSw
  112 00000030         ;*
  113 00000030         ;* ¹¦ÄÜÃèÊö: ÈÎÎñ¼¶ÉÏÏÂÎÄÇÐ»»         
  114 00000030         ;*
  115 00000030         ;* ²Î    Êý: None
  116 00000030         ;*
  117 00000030         ;* ·µ »Ø Öµ: None
  118 00000030         ;*******************************************************
                       ********************************/
  119 00000030         
  120 00000030         OSCtxSw
  121 00000030 B430            PUSH             {R4, R5}
  122 00000032 4C18            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  123 00000034 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  124 00000038 6025            STR              R5, [R4]
  125 0000003A BC30            POP              {R4, R5}
  126 0000003C 4770            BX               LR
  127 0000003E         
  128 0000003E         ;/******************************************************
                       ********************************
  129 0000003E         ;* º¯ÊýÃû³Æ: OSIntCtxSw



ARM Macro Assembler    Page 4 


  130 0000003E         ;*
  131 0000003E         ;* ¹¦ÄÜÃèÊö: ÖÐ¶Ï¼¶ÈÎÎñÇÐ»»
  132 0000003E         ;*
  133 0000003E         ;* ²Î    Êý: None
  134 0000003E         ;*
  135 0000003E         ;* ·µ »Ø Öµ: None
  136 0000003E         ;*******************************************************
                       ********************************/
  137 0000003E         
  138 0000003E         OSIntCtxSw
  139 0000003E B430            PUSH             {R4, R5}
  140 00000040 4C14            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  141 00000042 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  142 00000046 6025            STR              R5, [R4]
  143 00000048 BC30            POP              {R4, R5}
  144 0000004A 4770            BX               LR
  145 0000004C BF00            NOP
  146 0000004E         
  147 0000004E         ;/******************************************************
                       ********************************
  148 0000004E         ;* º¯ÊýÃû³Æ: OSPendSV
  149 0000004E         ;*
  150 0000004E         ;* ¹¦ÄÜÃèÊö: OSPendSV is used to cause a context switch.
                       
  151 0000004E         ;*
  152 0000004E         ;* ²Î    Êý: None
  153 0000004E         ;*
  154 0000004E         ;* ·µ »Ø Öµ: None
  155 0000004E         ;*******************************************************
                       ********************************/
  156 0000004E         
  157 0000004E         PendSV_Handler
  158 0000004E B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  159 00000050 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer Èç¹ûÔÚÓ
                                                            ÃPSP¶ÑÕ»,Ôò¿ÉÒÔºöÂÔ
                                                            ±£´æ¼Ä´æÆ÷,²Î¿¼CM3È
                                                            ¨ÍþÖÐµÄË«¶ÑÕ»-°×²Ë×
                                                            ¢
  160 00000054 B128            CBZ              R0, PendSV_Handler_Nosave ; Ski
                                                            p register save the
                                                             first time
  161 00000056         
  162 00000056 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  163 00000058 E880 0FF0       STM              R0, {R4-R11}
  164 0000005C         
  165 0000005C 490E            LDR              R1, =CurrentRunThread ; Current
                                                            RunThread->OSTDSStk
                                                            Ptr = SP;
  166 0000005E 6809            LDR              R1, [R1]
  167 00000060 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut



ARM Macro Assembler    Page 5 


  168 00000062         
  169 00000062         ; At this point, entire context of process has been save
                       d
  170 00000062         PendSV_Handler_Nosave
  171 00000062 480D            LDR              R0, =CurrentRunThread ; OSTCBCu
                                                            r  = OSTCBHighRdy;
  172 00000064 490D            LDR              R1, =ThreadSwtTarget
  173 00000066 680A            LDR              R2, [R1]
  174 00000068 6002            STR              R2, [R0]
  175 0000006A         
  176 0000006A B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  177 0000006C 480C            LDR              R0, =OSThreadSwtHook ; OSThread
                                                            SwtHook();
  178 0000006E 4780            BLX              R0
  179 00000070 F85D EB04       POP              {R14}
  180 00000074         
  181 00000074 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  182 00000076 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  183 0000007A 3020            ADDS             R0, R0, #0x20
  184 0000007C F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  185 00000080 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  186 00000084 B662            CPSIE            I
  187 00000086 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  188 00000088         
  189 00000088                 end
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\os_cpu
_a.d -o.\os_cpu_a.o -I.\kernel\Core -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\
Include -IC:\Keil\ARM\Inc\ST\STM32F10x --list=.\os_cpu_a.lst Driver\CoreDriver\
Cpu\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 32 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000030

Symbol: OSCtxSw
   Definitions
      At line 120 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 16 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 0000003E

Symbol: OSIntCtxSw
   Definitions
      At line 138 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 17 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002E

Symbol: OSStartHang
   Definitions
      At line 107 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 108 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 89 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 15 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 74 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 19 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 69 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 18 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004E

Symbol: PendSV_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 157 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 20 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_Nosave 00000062

Symbol: PendSV_Handler_Nosave
   Definitions
      At line 170 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 160 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: PendSV_Handler_Nosave used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 23 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 102 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
      At line 122 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
      At line 140 in file Driver\CoreDriver\Cpu\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 103 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
      At line 123 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
      At line 141 in file Driver\CoreDriver\Cpu\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 25 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 91 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 24 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 90 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

CurrentRunThread 00000000

Symbol: CurrentRunThread
   Definitions
      At line 11 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 165 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
      At line 171 in file Driver\CoreDriver\Cpu\os_cpu_a.asm

CurrentRunThreadNext 00000000

Symbol: CurrentRunThreadNext
   Definitions
      At line 10 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      None
Comment: CurrentRunThreadNext unused
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 9 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 97 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSRunning used once
OSThreadSwtHook 00000000

Symbol: OSThreadSwtHook
   Definitions
      At line 13 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 177 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: OSThreadSwtHook used once
ThreadSwtTarget 00000000

Symbol: ThreadSwtTarget
   Definitions
      At line 12 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
   Uses
      At line 172 in file Driver\CoreDriver\Cpu\os_cpu_a.asm
Comment: ThreadSwtTarget used once
5 symbols
350 symbols in table
